/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,39],$V2=[1,27],$V3=[1,34],$V4=[1,35],$V5=[1,37],$V6=[1,36],$V7=[1,31],$V8=[1,32],$V9=[1,30],$Va=[1,29],$Vb=[1,33],$Vc=[1,28],$Vd=[1,38],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[5,8,18,33,36,43,44,45,46,54,55,56,58,59,62,64,65,79,87,90,91],$Vi=[1,44],$Vj=[5,8,18,33,34,36,43,44,45,46,54,55,56,58,59,62,64,65,79,87,90,91,96,103,104,105,106,107,116,117,123],$Vk=[36,79],$Vl=[1,60],$Vm=[1,63],$Vn=[1,61],$Vo=[1,62],$Vp=[1,64],$Vq=[1,68],$Vr=[1,82],$Vs=[1,83],$Vt=[1,84],$Vu=[1,85],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,86],$VC=[1,88],$VD=[1,90],$VE=[7,52],$VF=[2,96],$VG=[1,99],$VH=[1,98],$VI=[1,109],$VJ=[7,35],$VK=[35,52],$VL=[1,114],$VM=[1,124],$VN=[1,122],$VO=[1,123],$VP=[1,125],$VQ=[1,126],$VR=[1,127],$VS=[1,128],$VT=[1,129],$VU=[1,130],$VV=[1,131],$VW=[1,132],$VX=[1,133],$VY=[1,134],$VZ=[1,135],$V_=[1,136],$V$=[1,137],$V01=[1,138],$V11=[1,139],$V21=[1,140],$V31=[1,141],$V41=[1,144],$V51=[7,8,35,37,52,78,96,97,98,99,100,101,102,108,109,110,111,112,113,114,115,118,119,120,121,122],$V61=[1,154],$V71=[7,29,35,52,53,77],$V81=[1,166],$V91=[1,162],$Va1=[1,163],$Vb1=[1,164],$Vc1=[1,165],$Vd1=[1,167],$Ve1=[2,125],$Vf1=[1,176],$Vg1=[1,179],$Vh1=[52,78],$Vi1=[2,180],$Vj1=[1,183],$Vk1=[7,8,29,35,37,52,78,93,96,97,98,99,100,101,102,108,109,110,111,112,113,114,115,118,119,120,121,122],$Vl1=[5,8,18,33,34,36,43,44,45,46,54,55,56,58,59,62,64,65,69,79,87,90,91,96,103,104,105,106,107,116,117,123],$Vm1=[1,195],$Vn1=[2,100],$Vo1=[2,98],$Vp1=[1,225],$Vq1=[7,8,29,35,52,53,77],$Vr1=[1,235],$Vs1=[1,234],$Vt1=[7,8,52],$Vu1=[1,238],$Vv1=[1,248],$Vw1=[2,49],$Vx1=[2,43],$Vy1=[1,250],$Vz1=[7,8,35,37,52,78,96,97,98,108,109,110,111,112,113,114,115],$VA1=[7,8,35,37,52,78,96,97,98,99,100,101,108,109,110,111,112,113,114,115],$VB1=[7,8,35,37,52,78,98,108,109,110,111,112,113,114,115],$VC1=[7,8,35,37,52,78,98,112,113,114,115],$VD1=[7,77],$VE1=[1,261],$VF1=[2,112],$VG1=[2,113],$VH1=[2,79],$VI1=[1,284],$VJ1=[1,288],$VK1=[1,289],$VL1=[1,292],$VM1=[8,62,64],$VN1=[2,69],$VO1=[1,353];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"ERROR":6,";":7,"}":8,"INSTRUCCION":9,"PRINT":10,"TIPOINICIAL":11,"LISTADECLARACIONES":12,"ASIGNACION":13,"IF":14,"WHILE":15,"DOWHILE":16,"INCREMENTO":17,"for":18,"FOR":19,"SWITCH":20,"BREAK":21,"CONTINUE":22,"FUNCION":23,"RETURN":24,"FUNCIONEJECUTAR":25,"TYPE":26,"DECLARARTYPE":27,"LISTADEIDS":28,"=":29,"EXPRESION":30,"GRAFICARENTORNO":31,"DECLARARARREGLO":32,"graficar_ts":33,"(":34,")":35,"identifier":36,":":37,"TIPO":38,"LISTAARRAYS":39,"ARRAYLISTA1":40,"AsignarArreglo":41,"ARRAYBUSCAR":42,"break":43,"continue":44,"return":45,"function":46,"LISTADECLARACIONESFUNCION":47,"TIPOFUNCION":48,"LISTAINTRUCCIONFUNCION":49,"DECLARACIONFUNCION":50,"LISTADECLARACIONESFUNCION1":51,",":52,"{":53,"++":54,"--":55,"do":56,"BLOQUEINIF":57,"while":58,"switch":59,"LCASES":60,"CASE":61,"case":62,"BIC":63,"default":64,"if":65,"BLOQUEIF":66,"BLOQUEELSE":67,"ELSEIF":68,"else":69,"in":70,"of":71,"LISTAIDS":72,"SEPARACION":73,"ID":74,"DECLARACION":75,"ARRAY":76,"[":77,"]":78,"type":79,"LISTADECLARACIONESTYPE":80,"DECLARACIONTYPE":81,"string":82,"number":83,"boolean":84,"void":85,"Array":86,"console.log":87,"LISTAEXP":88,"LISTAEXP1":89,"let":90,"const":91,"LISTAEXPRECIONES":92,".":93,"LISTADEIDS2":94,"IDARRAY":95,"-":96,"+":97,"?":98,"*":99,"/":100,"%":101,"**":102,"decimal":103,"true":104,"false":105,"null":106,"STRING_LITERAL":107,"<":108,"<=":109,">":110,">=":111,"==":112,"!=":113,"&&":114,"||":115,"!":116,"STRINGESPECIAL":117,".length":118,".charAt":119,".toLowerCase":120,".toUpperCase":121,".concat":122,"new":123,"array":124,"ARRAYLISTA2":125,"ARRAYLISTA3":126,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",8:"}",18:"for",29:"=",33:"graficar_ts",34:"(",35:")",36:"identifier",37:":",43:"break",44:"continue",45:"return",46:"function",52:",",53:"{",54:"++",55:"--",56:"do",58:"while",59:"switch",62:"case",64:"default",65:"if",69:"else",70:"in",71:"of",77:"[",78:"]",79:"type",82:"string",83:"number",84:"boolean",85:"void",86:"Array",87:"console.log",90:"let",91:"const",93:".",96:"-",97:"+",98:"?",99:"*",100:"/",101:"%",102:"**",103:"decimal",104:"true",105:"false",106:"null",107:"STRING_LITERAL",108:"<",109:"<=",110:">",111:">=",112:"==",113:"!=",114:"&&",115:"||",116:"!",117:"STRINGESPECIAL",118:".length",119:".charAt",120:".toLowerCase",121:".toUpperCase",122:".concat",123:"new",124:"array"},
productions_: [0,[3,2],[3,1],[6,2],[6,3],[6,2],[4,2],[4,1],[9,2],[9,3],[9,2],[9,1],[9,1],[9,1],[9,2],[9,2],[9,1],[9,2],[9,2],[9,1],[9,2],[9,2],[9,2],[9,2],[9,4],[9,1],[9,2],[31,4],[32,5],[32,7],[32,7],[41,4],[41,4],[21,1],[22,1],[24,2],[24,1],[24,2],[24,2],[23,7],[23,6],[47,2],[51,3],[51,0],[50,3],[50,3],[50,4],[50,4],[48,2],[48,0],[48,2],[48,3],[49,3],[49,2],[17,2],[17,2],[17,2],[17,2],[16,6],[16,7],[15,5],[20,7],[60,2],[60,1],[61,4],[61,3],[63,2],[63,3],[63,1],[63,0],[14,7],[14,6],[57,3],[57,2],[66,2],[66,1],[68,6],[67,4],[67,3],[67,0],[19,7],[19,7],[19,7],[19,6],[19,7],[19,6],[27,8],[72,3],[72,1],[74,3],[13,3],[13,5],[13,3],[12,3],[12,1],[75,3],[75,1],[75,5],[75,3],[75,5],[75,3],[39,2],[39,1],[76,2],[26,8],[26,8],[26,7],[26,7],[26,7],[26,6],[80,3],[80,1],[73,1],[73,1],[81,3],[81,3],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[10,4],[88,2],[89,3],[89,0],[11,1],[11,1],[25,4],[92,3],[92,1],[92,0],[28,3],[94,3],[94,1],[95,1],[30,2],[30,3],[30,5],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,2],[30,2],[30,2],[30,1],[30,1],[30,1],[30,1],[30,2],[30,5],[30,4],[30,4],[30,5],[30,5],[42,4],[42,3],[40,3],[125,3],[125,1],[126,1],[126,3],[126,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Tree($$[$0-1],pilaError);pilaError=new Array(); return this.$;
break;
case 2: case 66: case 69:
this.$=null;
break;
case 3: case 5:
 pilaError.push(new Exceptionn('Sintactico',"Se encontro un error En la instruccion",_$[$0-1].first_line-1, _$[$0-1].first_column));
break;
case 4:
 pilaError.push(new Exceptionn('Sintactico',"Se encontro un error En la instruccion",_$[$0-2].first_line-1, _$[$0-2].first_column));
break;
case 6:
 this.$ = $$[$0-1];
                 if($$[$0]+""===";"){ }
                 else  if($$[$0]+""==="}"){}
                 else  if ($$[$0]+""==="};"){}
                 else { this.$.push($$[$0]);}   
break;
case 7:


                 if($$[$0]+""===";"){ this.$ = [];}
                 else  if($$[$0]+""==="}"){this.$ = [];}
                  else  if ($$[$0]+""==="};"){this.$ = [];}

                 else {this.$ = [$$[$0]];}

                 
break;
case 8:
this.$ = $$[$0-1];
break;
case 9:
this.$=new declararLista($$[$0-2],$$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 10: case 14: case 17: case 18: case 20: case 22: case 23: case 52: case 67: case 179:
this.$=$$[$0-1];
break;
case 11: case 12: case 13: case 15: case 16: case 19: case 25: case 48: case 68: case 112: case 113: case 164: case 178:
this.$=$$[$0];
break;
case 21:
$$[$0-1].tipo=false;this.$=$$[$0-1];
break;
case 24:
this.$ = new ListaIdentificado(false,$$[$0-3],$$[$0-1],_$[$0-3].first_line,  _$[$0-3].first_column);
break;
case 26: case 72: case 77: case 175:
this.$=$$[$0-1]
break;
case 27:
this.$=new GraficarEntorno(_$[$0-3].first_line,  _$[$0-3].first_column);
break;
case 28:
this.$=new DeclararArreglo($$[$0-4],$$[$0-3],$$[$0-1],$$[$0],null,null,_$[$0-4].first_line,  _$[$0-4].first_column);
break;
case 29:
this.$=new DeclararArreglo($$[$0-6],$$[$0-5],$$[$0-3],$$[$0-2],$$[$0],null,_$[$0-6].first_line,  _$[$0-6].first_column);
break;
case 30:
this.$=new DeclararArreglo($$[$0-6],$$[$0-5],$$[$0-3],$$[$0-2],null,$$[$0],_$[$0-6].first_line,  _$[$0-6].first_column);
break;
case 31:
this.$=new ArrayInstruccion($$[$0-3],$$[$0-2],$$[$0],null,_$[$0-3].first_line,  _$[$0-3].first_column);
break;
case 32:
this.$=new ArrayInstruccion($$[$0-3],$$[$0-2],null,$$[$0],_$[$0-3].first_line,  _$[$0-3].first_column);
break;
case 33:
this.$=new Break(_$[$0].first_line, _$[$0].first_column);
break;
case 34:
this.$=new Continue(_$[$0].first_line, _$[$0].first_column);
break;
case 35:
this.$=new Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 36:
this.$=new Return(null,_$[$0].first_line, _$[$0].first_column);
break;
case 37:
var dato=new Return(null,_$[$0-1].first_line, _$[$0-1].first_column);dato.arrays=$$[$0]; this.$=dato;
break;
case 38:
var dato=new Return(null,_$[$0-1].first_line, _$[$0-1].first_column);dato.arrays=[]; this.$=dato;
break;
case 39:
this.$ =new Funcion($$[$0-5],$$[$0-3],$$[$0-1],$$[$0] ,_$[$0-6].first_line, _$[$0-6].first_column); pilaFuncion=new Array();
break;
case 40:
this.$ =new Funcion($$[$0-4],null,$$[$0-1],$$[$0] ,_$[$0-5].first_line, _$[$0-5].first_column); pilaFuncion=new Array();
break;
case 41:
 this.$ = $$[$0]; this.$.push ($$[$0-1]); 
break;
case 42:
  this.$ = $$[$0]; this.$.push ($$[$0-1]);
break;
case 43:
 this.$ = []
break;
case 44: case 98:
this.$= new Declaracion(4,false,$$[$0-2],$$[$0],null,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 45: case 100:
var dec=new Declaracion(6,false,$$[$0-2],null,null,_$[$0-2].first_line, _$[$0-2].first_column);  dec.Identificador=$$[$0];  this.$=dec;
break;
case 46:
var dec=new Declaracion(8,false,$$[$0-3],$$[$0-1],null,_$[$0-3].first_line, _$[$0-3].first_column);  dec.Arrays=$$[$0];  this.$=dec;
break;
case 47:
var dec=new Declaracion(10,false,$$[$0-3],null,null,_$[$0-3].first_line, _$[$0-3].first_column);  dec.Identificador=$$[$0-1]; dec.Arrays=$$[$0]; this.$=dec;
break;
case 49:
this.$=new Type(types.ANY);
break;
case 50:
var data=new Type(types.OBJET);data.nombre=$$[$0]; this.$=data;
break;
case 51:
var dato=new Type(types.OBJET);dato.typeObjeto=types.ARRAY;dato.typeArray=$$[$0-1].type; this.$=dato;
break;
case 53: case 73: case 78: case 79: case 125: case 180:
this.$=null
break;
case 54:
this.$=new Incremento(true,true,false,$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 55:
this.$=new Incremento(true,false,false,$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 56:
this.$=new Incremento(true,true,true,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 57:
this.$=new Incremento(true,false,true,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 58:
this.$= new DoWhile($$[$0-1],$$[$0-4],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 59:
this.$= new DoWhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 60:
this.$= new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 61:
   this.$ = new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 62: case 74:
  this.$ = $$[$0-1]; this.$.push ($$[$0]);
break;
case 63: case 75:
   this.$ = [$$[$0]];
break;
case 64:
   this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 65:
   this.$ = new Case(null,$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$= new IF(false,$$[$0-4],$$[$0-2],$$[$0-1],$$[$0],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 71:
this.$= new IF(false,$$[$0-3],$$[$0-1],null,$$[$0],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 76:
 this.$=new IF(true,$$[$0-2],$$[$0],null,null,_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 80: case 81:
this.$=new For($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 82:
this.$=new ForIn(true,new Declaracion(2,$$[$0-5],$$[$0-4],null,null ,_$[$0-6].first_line, _$[$0-6].first_column),null,$$[$0-2],$$[$0],_$[$0-6].first_line,  _$[$0-6].first_column);
break;
case 83:
this.$=new ForIn(false,null,$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,  _$[$0-5].first_column);
break;
case 84:
this.$=new ForOF(true,new Declaracion(2,$$[$0-5],$$[$0-4],null,null ,_$[$0-6].first_line, _$[$0-6].first_column),null,$$[$0-2],$$[$0],_$[$0-6].first_line,  _$[$0-6].first_column);
break;
case 85:
this.$=new ForOF(false,null,$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,  _$[$0-5].first_column);
break;
case 86:
this.$=new DeclararType($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
break;
case 87:
this.$ = $$[$0-2]; this.$.push ($$[$0]);
break;
case 88: case 111: case 130: case 134:
this.$=[$$[$0]];
break;
case 89:
this.$=new IdentificadorExprecion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
var data= new Asignacion($$[$0-4], null, _$[$0-4].first_line, _$[$0-4].first_column);data.listaTYPES=$$[$0-1];data.type=new Type(types.TYPE);this.$=data;
break;
case 92:
var data= new Asignacion($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column);data.listaARRAY=$$[$0];data.type=new Type(types.ARRAY);this.$=data;
break;
case 93:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 94:
 this.$ = [$$[$0]]; 
break;
case 95:
this.$= new Declaracion(1,false,$$[$0-2],null,$$[$0] ,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$= new Declaracion(2,false,$$[$0],null,null ,_$[$0].first_line, _$[$0].first_column);
break;
case 97:
this.$= new Declaracion(3,false,$$[$0-4],$$[$0-2],$$[$0] ,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 99:
var dec=new Declaracion(5,false,$$[$0-4],null,$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);dec.Identificador=$$[$0-2];  this.$=dec;
break;
case 101:
this.$=$$[$0-1]+1;
break;
case 102: case 103:
this.$=1;
break;
case 104: case 105:
this.$=new TypeDeclaracion($$[$0-7],$$[$0-5],$$[$0-2],_$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 106:
this.$=new TypeDeclaracion($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 107: case 108:
this.$=new TypeDeclaracion(true,$$[$0-5],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 109:
this.$=new TypeDeclaracion(true,$$[$0-4],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 110: case 129:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 114:
this.$= new Declaracion(4,true,$$[$0-2],$$[$0],null,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 115:
 let tipo=new Type(types.OBJET); tipo.typeObjeto= types.TYPE;tipo.nombre=$$[$0]; this.$= new Declaracion(4,true,$$[$0-2],tipo,null,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 116:
this.$=new Type(types.STRING)
break;
case 117:
this.$=new Type(types.NUMERIC)
break;
case 118:
this.$=new Type(types.BOOLEAN)
break;
case 119:
this.$=new Type(types.VOID)
break;
case 120:
this.$=new Type(types.TYPE)
break;
case 121:
this.$=new Type(types.ARRAY)
break;
case 122:
 this.$ = new Print(pilaprint, _$[$0-3].first_line,  _$[$0-3].first_column);pilaprint=new Array();
break;
case 123: case 124:
pilaprint.push($$[$0-1]);
break;
case 126:
this.$=true;
break;
case 127:
this.$=false;
break;
case 128:
this.$=new FuncionEjecutar(true,$$[$0-3],$$[$0-1],_$[$0-3].first_line,  _$[$0-3].first_column);
break;
case 131:
this.$=[];
break;
case 132:
this.$ = $$[$0]; this.$.unshift(new IDArray($$[$0-2],null,_$[$0-2].first_line, _$[$0-2].first_column));
break;
case 133:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 135:
this.$=new IDArray($$[$0],null,_$[$0].first_line, _$[$0].first_column);
break;
case 136:
 this.$ = new Arithmetic($$[$0], null, '-', _$[$0-1].first_line, _$[$0-1].first_column);  
break;
case 137:
 this.$ = new Arithmetic( $$[$0-2],  $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 138:
 this.$ = new Ternario( $$[$0-4],  $$[$0-2] ,$$[$0],  _$[$0-4].first_line, _$[$0-4].first_column);  
break;
case 139:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 140:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 141:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 142:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 143:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '**', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 144:
 this.$ = new Primitive(new Type(types.NUMERIC), Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 145:
 this.$ = new Primitive(new Type(types.BOOLEAN), true, _$[$0].first_line, _$[$0].first_column); 
break;
case 146:
 this.$ = new Primitive(new Type(types.BOOLEAN), false, _$[$0].first_line, _$[$0].first_column); 
break;
case 147:
 this.$ = new Primitive(new Type(types.NULL), "null", _$[$0].first_line, _$[$0].first_column); 
break;
case 148:
 $$[$0]= $$[$0].replace(/\'/g,""); $$[$0]= $$[$0].replace(/\"/g,"");    this.$ = new Primitive(new Type(types.STRING), $$[$0],_$[$0].first_line, _$[$0].first_column); 
break;
case 149:
 this.$ = new Parentesis ( $$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 150:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 151:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 152:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 153:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 154:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 155:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 156:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 157:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 158:
this.$=new Incremento(false,true,false,$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 159:
this.$=new Incremento(false,false,false,$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 160:
this.$=new Incremento(false,true,true,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 161:
this.$=new Incremento(false,false,true,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 162:
 this.$ = new Arithmetic($$[$0], null, '!', _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 163:
 this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 165:
 $$[$0]= $$[$0].replace(/\`/g,"") ;this.$ = new StringEspecial(new Type(types.STRING),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 166:
this.$ = new ListaIdentificado(true,$$[$0],null,_$[$0].first_line,  _$[$0].first_column);
break;
case 167:
this.$ = new StringLength($$[$0-1],_$[$0-1].first_line,  _$[$0-1].first_column);
break;
case 168:
this.$ = new StringCharAt($$[$0-4],$$[$0-1],_$[$0-4].first_line,  _$[$0-4].first_column);
break;
case 169:
this.$ = new StringToLowerCase($$[$0-3],_$[$0-3].first_line,  _$[$0-3].first_column);
break;
case 170:
this.$ = new StringToUpperCase($$[$0-3],_$[$0-3].first_line,  _$[$0-3].first_column);
break;
case 171:
this.$ = new StringConcat($$[$0-4],$$[$0-1],_$[$0-4].first_line,  _$[$0-4].first_column);
break;
case 172:
this.$=new nuevoArreglo($$[$0-1],_$[$0-4].first_line,  _$[$0-4].first_column);
break;
case 173:
this.$=$$[$0-3];this.$.push($$[$0-1]);
break;
case 174:
this.$=[$$[$0-1]]
break;
case 176:
this.$=$$[$0-2]; this.$.push($$[$0])
break;
case 177:
   this.$=[$$[$0]];if($$[$0]==null){this.$.pop()}
break;
}
},
table: [{3:1,4:2,5:[1,3],9:4,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},{1:[3]},{5:[1,40],9:41,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},{1:[2,2]},o($Vh,[2,7]),{7:[1,42]},{12:43,36:[1,45],75:46,79:$Vi},{7:[1,47]},o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),{7:[1,48]},{19:49,34:[1,50]},o($Vj,[2,16]),{7:[1,51]},{7:[1,52]},o($Vj,[2,19]),{7:[1,53]},{7:[1,54]},{7:[1,55]},{7:[1,56]},{29:[1,57]},o($Vj,[2,25]),{7:[1,58]},{34:[1,59]},o($Vk,[2,126]),o($Vk,[2,127]),{29:$Vl,34:$Vm,54:$Vn,55:$Vo,93:$Vp},{34:[1,65]},{34:[1,66]},{53:$Vq,57:67},{36:[1,69]},{36:[1,70]},{34:[1,71]},{7:[2,33]},{7:[2,34]},{36:[1,72]},{7:[2,36],25:87,28:89,30:73,34:$Vr,36:$Vs,39:75,42:74,54:$Vt,55:$Vu,76:92,77:[1,91],96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{36:[1,93]},{34:[1,94]},{1:[2,1]},o($Vh,[2,6]),o($Vj,[2,8]),{7:[1,95],52:[1,96]},{36:[1,97]},o($VE,$VF,{29:$VG,37:$VH}),o($VE,[2,94]),o($Vj,[2,10]),o($Vj,[2,14]),o($Vj,[2,15]),{9:100,10:5,11:101,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:[1,102],43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),{25:87,28:89,30:103,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($Vj,[2,26]),{25:87,28:89,30:105,34:$Vr,36:$Vs,54:$Vt,55:$Vu,88:104,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:106,34:$Vr,36:$Vs,40:108,53:[1,107],54:$Vt,55:$Vu,77:$VI,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($VJ,[2,54]),o($VJ,[2,55]),o($VK,[2,131],{25:87,28:89,92:110,30:111,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD}),{36:$VL,94:112,95:113},{25:87,28:89,30:115,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:116,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{58:[1,117]},{4:118,8:[1,119],9:4,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},o($VJ,[2,56]),o($VJ,[2,57]),{25:87,28:89,30:120,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{34:[1,121]},{7:[2,35],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{7:[2,37],77:[1,142]},{7:[2,38],76:143,77:$V41},{25:87,28:89,30:145,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($V51,[2,144]),o($V51,[2,145]),o($V51,[2,146]),o($V51,[2,147]),o($V51,[2,148]),{25:87,28:89,30:146,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($V51,[2,163],{34:$Vm,54:[1,147],55:[1,148],93:$Vp}),{36:[1,149]},{36:[1,150]},{25:87,28:89,30:151,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($V51,[2,164]),o($V51,[2,165]),o($V51,[2,166]),{124:[1,152]},{25:87,28:89,30:153,34:$Vr,36:$Vs,54:$Vt,55:$Vu,78:$V61,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($V71,[2,102]),{29:[1,155]},{35:[1,156]},o($Vj,[2,9]),{36:[1,158],75:157},{29:[1,159]},{36:[1,160],38:161,79:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{25:87,28:89,30:168,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:169,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{12:43,36:[1,170],75:46,79:$Vi},{29:$Vl,34:$Vm,54:$Vn,55:$Vo,70:[1,171],71:[1,172],93:$Vp},{7:[1,173],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{35:[1,174]},{35:$Ve1,52:$Vf1,89:175,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($VJ,[2,90],{96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),{36:$Vg1,72:177,74:178},o($VJ,[2,92]),o($Vh1,$Vi1,{25:87,28:89,125:180,126:181,30:182,34:$Vr,36:$Vs,54:$Vt,55:$Vu,77:$Vj1,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD}),{35:[1,184],52:[1,185]},o($VK,[2,130],{96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o([7,8,29,35,37,52,78,96,97,98,99,100,101,102,108,109,110,111,112,113,114,115,118,119,120,121,122],[2,132],{93:[1,186]}),o($Vk1,[2,134]),o($Vk1,[2,135]),{35:[1,187],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{35:[1,188],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{34:[1,189]},{8:[1,190],9:41,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},o($Vl1,[2,73]),{35:[1,191],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{35:[1,193],36:$Vm1,47:192,50:194},{25:87,28:89,30:196,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:197,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:198,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:199,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:200,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:201,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:202,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:203,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:204,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:205,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:206,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:207,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:208,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:209,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:210,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($V51,[2,167]),{34:[1,211]},{34:[1,212]},{34:[1,213]},{34:[1,214]},{25:87,28:89,30:215,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($V71,[2,101]),{78:$V61},o($V51,[2,136]),{35:[1,216],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($V51,[2,158]),o($V51,[2,159]),o($V51,[2,160]),o($V51,[2,161]),o($V51,[2,162]),{34:[1,217]},{78:[1,218],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($V71,[2,103]),{53:[1,219]},{7:[1,220]},o($VE,[2,93]),o($VE,$VF,{29:$VG,37:[1,221]}),{53:[1,222]},o($VE,$Vn1,{29:[1,223]}),o($VE,$Vo1,{76:92,39:224,29:$Vp1,77:$V41}),o($Vq1,[2,116]),o($Vq1,[2,117]),o($Vq1,[2,118]),o($Vq1,[2,119]),o($Vq1,[2,120]),o($Vq1,[2,121]),o($VE,[2,95],{96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),{7:[1,226],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($VE,$VF,{29:$VG,37:$VH,70:[1,227],71:[1,228]}),{25:87,28:89,30:229,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:230,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($Vj,[2,24]),{7:[2,122]},{35:[2,123]},{25:87,28:89,30:231,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{7:$Vr1,8:[1,232],52:$Vs1,73:233},o($Vt1,[2,88]),{37:[1,236]},{52:$Vu1,78:[1,237]},o($Vh1,[2,177]),o($Vh1,[2,178],{96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($Vh1,$Vi1,{25:87,28:89,126:181,30:182,125:239,34:$Vr,36:$Vs,54:$Vt,55:$Vu,77:$Vj1,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD}),o($V51,[2,128]),{25:87,28:89,30:240,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{36:$VL,95:241},{53:$Vq,57:242},{53:$Vq,57:243},{25:87,28:89,30:244,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($Vl1,[2,72]),{53:[1,245]},{35:[1,246]},{37:$Vv1,48:247,53:$Vw1},{35:$Vx1,51:249,52:$Vy1},{37:[1,251]},o($Vz1,[2,137],{99:$VP,100:$VQ,101:$VR,102:$VS,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),{37:[1,252],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($Vz1,[2,139],{99:$VP,100:$VQ,101:$VR,102:$VS,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($VA1,[2,140],{102:$VS,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($VA1,[2,141],{102:$VS,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($VA1,[2,142],{102:$VS,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o([7,8,35,37,52,78,96,97,98,99,100,101,102,108,109,110,111,112,113,114,115],[2,143],{118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($VB1,[2,150],{96:$VM,97:$VN,99:$VP,100:$VQ,101:$VR,102:$VS,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($VB1,[2,151],{96:$VM,97:$VN,99:$VP,100:$VQ,101:$VR,102:$VS,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($VB1,[2,152],{96:$VM,97:$VN,99:$VP,100:$VQ,101:$VR,102:$VS,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($VB1,[2,153],{96:$VM,97:$VN,99:$VP,100:$VQ,101:$VR,102:$VS,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($VC1,[2,154],{96:$VM,97:$VN,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($VC1,[2,155],{96:$VM,97:$VN,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o([7,8,35,37,52,78,98,114,115],[2,156],{96:$VM,97:$VN,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o([7,8,35,37,52,78,98,115],[2,157],{96:$VM,97:$VN,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),{25:87,28:89,30:253,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{35:[1,254]},{35:[1,255]},{25:87,28:89,30:256,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{78:[1,257],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($V51,[2,149]),{25:87,28:89,30:258,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($VD1,[2,174]),{36:$VE1,80:259,81:260},o($Vj,[2,27]),{36:[1,263],38:262,79:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{36:$VE1,80:264,81:260},{25:87,28:89,30:266,34:$Vr,36:$Vs,53:[1,265],54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{7:[2,28],29:[1,267],76:143,77:$V41},{25:87,28:89,30:268,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{13:270,17:269,36:[1,271],54:$V7,55:$V8},{25:87,28:89,30:272,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{25:87,28:89,30:273,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{35:[1,274],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{35:[1,275],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{35:$Ve1,52:$Vf1,89:276,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($VJ,[2,91]),{36:$Vg1,74:277},{36:$VF1},{36:$VG1},{25:87,28:89,30:278,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($VJ,[2,175]),o($Vh1,$Vi1,{25:87,28:89,30:182,126:279,34:$Vr,36:$Vs,54:$Vt,55:$Vu,77:$Vj1,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD}),{52:$Vu1,78:[1,280]},o($VK,[2,129],{96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($Vk1,[2,133]),o($Vj,$VH1,{66:281,67:282,68:283,69:$VI1}),o($Vj,[2,60]),{35:[1,285],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{60:286,61:287,62:$VJ1,64:$VK1},{37:$Vv1,48:290,53:$Vw1},{49:291,53:$VL1},{36:[1,294],38:293,79:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{35:[2,41]},{36:$Vm1,50:295},{36:[1,297],38:296,79:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{25:87,28:89,30:298,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{35:[1,299],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($V51,[2,169]),o($V51,[2,170]),{35:[1,300],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($VD1,[2,173]),{35:[1,301],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{7:[1,303],8:[1,304],52:[1,302],73:305},o($Vt1,[2,111]),{37:[1,306]},o($VE,$Vo1,{29:$Vp1}),o($VE,$Vn1,{29:[1,307]}),{7:[1,309],8:[1,310],52:[1,308],73:305},{36:$Vg1,72:311,74:178},o($VE,[2,99],{96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),{25:87,28:89,30:312,34:$Vr,36:$Vs,40:313,54:$Vt,55:$Vu,77:$VI,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($VE,[2,97],{96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),{35:[1,314]},{35:[1,315]},{29:$Vl,54:$Vn,55:$Vo},{35:[1,316],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{35:[1,317],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{53:$Vq,57:318},{53:$Vq,57:319},{35:[2,124]},o($Vt1,[2,87]),o($Vt1,[2,89],{96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($Vh1,[2,176]),o($Vh1,[2,179]),o($Vj,$VH1,{67:320,68:321,69:$VI1}),o($Vj,[2,71]),o($Vl1,[2,75]),{53:[1,322],65:[1,323]},o($Vj,[2,58],{7:[1,324]}),{8:[1,325],61:326,62:$VJ1,64:$VK1},o($VM1,[2,63]),{25:87,28:89,30:327,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{37:[1,328]},{49:329,53:$VL1},o($Vj,[2,40]),{4:330,8:[1,331],9:4,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},{39:332,53:[2,48],76:92,77:$V41},{53:[2,50]},{35:$Vx1,51:333,52:$Vy1},o($VK,[2,44],{76:92,39:334,77:$V41}),o($VK,[2,45],{76:92,39:335,77:$V41}),o([7,8,35,37,52,78],[2,138],{96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31}),o($V51,[2,168]),o($V51,[2,171]),o($V51,[2,172]),{8:[1,336],36:$VF1},{8:[1,337],36:$VG1},{7:[2,109]},{36:$VE1,81:338},{36:[1,340],38:339,79:$V81,82:$V91,83:$Va1,84:$Vb1,85:$Vc1,86:$Vd1},{25:87,28:89,30:266,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},{8:[1,341],36:$VF1},{8:[1,342],36:$VG1},{7:[2,106]},{7:$Vr1,8:[1,343],52:$Vs1,73:233},{7:[2,29],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},{7:[2,30]},{53:$Vq,57:344},{53:$Vq,57:345},{53:$Vq,57:346},{53:$Vq,57:347},o($Vj,[2,83]),o($Vj,[2,85]),o($Vj,[2,70]),o($Vl1,[2,74]),{4:348,8:[1,349],9:4,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},{34:[1,350]},o($Vj,[2,59]),o($Vj,[2,61]),o($VM1,[2,62]),{37:[1,351],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($VM1,$VN1,{9:4,10:5,11:6,13:7,14:8,15:9,16:10,17:11,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,63:352,4:354,18:$V0,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,53:$VO1,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg}),o($Vj,[2,39]),{8:[1,355],9:41,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},o($Vj,[2,53]),{53:[2,51],76:143,77:$V41},{35:[2,42]},o($VK,[2,46],{76:143,77:$V41}),o($VK,[2,47],{76:143,77:$V41}),{7:[2,107]},{7:[2,108]},o($Vt1,[2,110]),o($Vt1,[2,114]),o($Vt1,[2,115]),{7:[2,104]},{7:[2,105]},{7:[2,86]},o($Vj,[2,80]),o($Vj,[2,81]),o($Vj,[2,82]),o($Vj,[2,84]),{8:[1,356],9:41,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},o($Vj,[2,78]),{25:87,28:89,30:357,34:$Vr,36:$Vs,54:$Vt,55:$Vu,96:$Vv,103:$Vw,104:$Vx,105:$Vy,106:$Vz,107:$VA,116:$VB,117:$VC,123:$VD},o($VM1,$VN1,{9:4,10:5,11:6,13:7,14:8,15:9,16:10,17:11,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,4:354,63:358,18:$V0,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,53:$VO1,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg}),o($VM1,[2,65]),{4:360,8:[1,359],9:4,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},o($VM1,[2,68],{10:5,11:6,13:7,14:8,15:9,16:10,17:11,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,9:41,18:$V0,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg}),o($Vj,[2,52]),o($Vj,[2,77]),{35:[1,361],96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,118:$V$,119:$V01,120:$V11,121:$V21,122:$V31},o($VM1,[2,64]),o($VM1,[2,66]),{8:[1,362],9:41,10:5,11:6,13:7,14:8,15:9,16:10,17:11,18:$V0,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,31:22,32:23,33:$V1,36:$V2,43:$V3,44:$V4,45:$V5,46:$V6,54:$V7,55:$V8,56:$V9,58:$Va,59:$Vb,65:$Vc,79:$Vd,87:$Ve,90:$Vf,91:$Vg},{53:$Vq,57:363},o($VM1,[2,67]),o($Vl1,[2,76])],
defaultActions: {3:[2,2],34:[2,33],35:[2,34],40:[2,1],174:[2,122],175:[2,123],234:[2,112],235:[2,113],249:[2,41],276:[2,124],294:[2,50],304:[2,109],310:[2,106],313:[2,30],333:[2,42],336:[2,107],337:[2,108],341:[2,104],342:[2,105],343:[2,86]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const {Primitive} = require('../Expresiones/Primitive');
const {Arithmetic} = require('../Expresiones/Arithmetic');
const {Identificador} = require('../Expresiones/Identificador');
const {Ternario} = require('../Expresiones/Ternario');
const {Print} = require('../Instrucciones/Print');
const {Excepcionn} = require('../utilidad/Exceptionn');
const {Type, types} = require('../utilidad/Type');
const {Tree} = require('../Simbols/Tree');
const {Declaracion} = require('../Instrucciones/Declaracion');
const {Asignacion} = require('../Instrucciones/Asignacion');
const {declararLista} = require('../Instrucciones/declararLista');
const {While} = require('../Instrucciones/While');
const {IF} = require('../Instrucciones/IF');
const {DoWhile} = require('../Instrucciones/DoWhile');
const {Incremento} = require('../utilidad/Incremento');
const {Exceptionn} = require('../utilidad/Exceptionn');
const {For} = require('../Instrucciones/For');
const {Case} = require('../Instrucciones/Case');
const {Switch} = require('../Instrucciones/Switch');
const {Break} = require('../Instrucciones/Break');
const {Continue} = require('../Instrucciones/Continue');
const {Return} = require('../Instrucciones/Return');
const {Funcion} = require('../Instrucciones/Funcion');
const {TypeDeclaracion} = require('../Instrucciones/TypeDeclaracion');
const {FuncionEjecutar} = require('../Expresiones/FuncionEjecutar')
const {Parentesis} = require('../Expresiones/Parentesis');
const {DeclararType} = require('../Instrucciones/DeclararType');
const {IdentificadorExprecion} = require('../Instrucciones/IdentificadorExprecion');
const {ListaIdentificado} = require('../Instrucciones/ListaIdentificado');
const {ForIn} = require('../Instrucciones/ForIn');
const {IDArray} = require('../Instrucciones/IDArray');
const {GraficarEntorno} = require('../Instrucciones/GraficarEntorno');
const {ForOF} = require('../Instrucciones/ForOF');
const {StringEspecial} = require('../Expresiones/StringEspecial');
const {ArrayBusqueda} = require('../Expresiones/ArrayBusqueda');
const {ArrayInstruccion} = require('../Instrucciones/ArrayInstruccion');
const {ArrayLength} = require('../Expresiones/ArrayLength');
const {ArraPush} = require('../Instrucciones/ArraPush');
const {ArrayPop} = require('../Instrucciones/ArrayPop');
const {StringLength} = require('../Expresiones/StringLength');
const {StringCharAt} = require('../Expresiones/StringCharAt');
const {StringToLowerCase} = require('../Expresiones/StringToLowerCase');
const {StringToUpperCase} = require('../Expresiones/StringToUpperCase');
const {StringConcat} = require('../Expresiones/StringConcat');
const {DeclararArreglo} = require('../Instrucciones/DeclararArreglo');
const {nuevoArreglo} = require('../Expresiones/nuevoArreglo');

var pilaFuncion=new Array();
var pilaError=new Array();
var pilaprint=new Array();
var token_error;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* */
break;
case 1:/* */
break;
case 2:/* skip whitespace */
break;
case 3:/* */
break;
case 4:return 103
break;
case 5:return 117
break;
case 6:return 107
break;
case 7:return 102
break;
case 8:return 100
break;
case 9:return 7
break;
case 10:return 55
break;
case 11:return 96
break;
case 12:return 52
break;
case 13:return 54
break;
case 14:return 97
break;
case 15:return 98
break;
case 16:return 99
break;
case 17:return 37
break;
case 18:return 101
break;
case 19:return 109
break;
case 20:return 111
break;
case 21:return 108
break;
case 22:return 110
break;
case 23:return 112
break;
case 24:return 113
break;
case 25:return 115
break;
case 26:return 114
break;
case 27:return 116
break;
case 28:return 29
break;
case 29:return 118
break;
case 30:return 119
break;
case 31:return 120
break;
case 32:return 121
break;
case 33:return 122
break;
case 34:return 93
break;
case 35:return 34
break;
case 36:return 35
break;
case 37:return 77
break;
case 38:return 78
break;
case 39:return 53
break;
case 40:return 8
break;
case 41:return 104
break;
case 42:return 45
break;
case 43:return 33
break;
case 44:return 18
break;
case 45:return 123
break;
case 46:return 124
break;
case 47:return 70
break;
case 48:return 71
break;
case 49:return 90
break;
case 50:return 91
break;
case 51:return 105
break;
case 52:return 87
break;
case 53:return 65
break;
case 54:return 106
break;
case 55:return 69
break;
case 56:return 43
break;
case 57:return 59
break;
case 58:return 62
break;
case 59:return 64
break;
case 60:return 44
break;
case 61:return 58
break;
case 62:return 'numeric'
break;
case 63:return 46
break;
case 64:return 83
break;
case 65:return 82
break;
case 66:return 84
break;
case 67:return 'push'
break;
case 68:return 56
break;
case 69:return 85
break;
case 70:return 86
break;
case 71:return 79
break;
case 72:return 'pop'
break;
case 73:return 36
break;
case 74:

    pilaError.push(new Exceptionn('Lexico', "no es un caracter valido: "+yy_.yytext,yy_.yylloc.first_line, yy_.yylloc.first_column));

break;
case 75:return 5
break;
}
},
rules: [/^(?:((\/\*)[^\*\/]*(\*\/)))/i,/^(?:[ \\\t\r\n\f])/i,/^(?:\s+)/i,/^(?:(\/\/[^\n]*))/i,/^(?:(([0-9]+)(\.([0-9]+))?))/i,/^(?:(((`[^`]*`))))/i,/^(?:((("[^"]*")|('[^']*'))))/i,/^(?:\*\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:--)/i,/^(?:-)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:\?)/i,/^(?:\*)/i,/^(?::)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\.length\b)/i,/^(?:\.charAt\b)/i,/^(?:\.toLowerCase\b)/i,/^(?:\.toUpperCase\b)/i,/^(?:\.concat\b)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:true\b)/i,/^(?:return\b)/i,/^(?:graficar_ts\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:array\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:false\b)/i,/^(?:console\.log\b)/i,/^(?:if\b)/i,/^(?:null\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:numeric\b)/i,/^(?:function\b)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:push\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:Array\b)/i,/^(?:type\b)/i,/^(?:pop\b)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}